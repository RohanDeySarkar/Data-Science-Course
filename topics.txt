*DSA (algoexpert)

*SYSTEM DESIGN (algoexpert)
client, server, port, dns, ip, tcp, http, https, ftp, smtp,  ip packet, webrtc,  disk(non-volatile storage), latency, throughput
availability, redundancy, sla/slo, cache hit/stale/miss, eviction policy (lru, fifo, lfu), cdn (clouflare, google cloud cdn)
proxy, reverse proxy, loadbalancer (nginx/reverse proxy), round robin (performance based/ip based), hot spot,
hashing (consistent/rendezvous), SHA, sql/nosql, ACID, db index, strong/eventual consistency, key-value store (etcd, zookeeper, redis)
storage types (blob -> gcs/s3, time series -> influxdb/prometheus, graph -> neo4j, spatial -> quadtree)
replication, sharding, leader election, paxos/raft, peer-to-peer (kraken), gossip protocol, polling, streaming
rate limiting, dos/ddos attack (redis), pub/sub pattern (topic/msg) (apache kafka), idempotent op
mapreduce, distributed file system, google file system(GFS)/Hadoop(HDFS)
man-in-the-middle attack, symmetric(1key)/asymmetric(2keys) encryp, aes, tls, ssl certificate
pagination, access control list(ACL)/CRUD api
horizontal vs vertical scaling
thrashing, Pull vs. Push, OAuth,	Microservices vs. Monoliths, Distributed Caching
blob splitters, Content-Addressable Storage
CAP Theorem, event driven system, auths
db indexing -> [text search -> inverted index (elasticsearch), location data -> geospatial index, in-memory exact match -> hash index, everything else -> B-Tree]
API Gateway (handles loadbalancing, routing, auth, rate limiting etc.)

[JFYI]
monorepo, webpack, parallel routing, multithreading

*OOPs concepts
function (default, positional arguments)
class
attributes (variables)
methods (in class func)
object
constructor
class/instance variable, instance method
static method
accesor, mutator
decorator, @classmethod
generator, yield
inner/outer class
inheritance
ploymorphism (operator overloading/overriding, method overloading/overriding)
abstraction

*STATISTICS (khan academy, 26 weeks, o'reilly, datacamp)
mean, median, mode, variance, pop variance, sd, percentile
iqr
outlier
conf interval, z-score
t-dist, dof
p-val, hypothesis, type 1 2 err
covariance, correlation/r-square, residual, 
vif,  
pmf, cdf, pdf
normality, 
uniform/gaussian/normal, standard normal, exponential, binomial, poisson distribution
non-gaussian -> has skewness
interpolation, extrapolation
skewness
central limit theo
standard, squared margin of err
maximum likelihood
monte carlo

*PROBABILITY (khan academy, coursera)
conditional, bayes

*PLOTS
cat vs cat -> groupby barplot, catplot(count)
num vs cat -> box, swarm
num vs num -> joint, heatmap, pair, scatter, 
single col checks -> countplot (change hue granularity), barplot, box, distplot (bins)
t-sne

*ML ALGOS 
linear reg assumptions, cost func, polynomial reg, non linear data
simpson paradox
l1 l2 regularization
cost functions (ols, log odd, log loss)
cart(not fixed only to binary)
gini index, entropy ig, chi-square, pruning, bootstraping
random forest, bootstraping
ensemble
adaboost vs gradientboost
naive bayes, gaussian naive bayes 
knn
Jaccard score
clustering, hierarchy, dendogram
euclidean distance
overfitting, underfitting
imputer
remove skewness
class imbalance
normlization, scaling, standardization
onehot, label encoding
cv, gridsearch
confusion matrix, auc roc 
rmse
warpper, filter methods
types of variables (categorical (nominial, ordinal), numerical(continuos, discrete))

*NLP
tokenization, stop word
stemming, lemmatization(wordnet)
wordcloud
tfidf, count vectorizer
one hot encoder, label encoder
bag of words

*TIME SERIES
white noise
trend, seasonality, seasonal_decompose -> show trend, seasonality, residual
adf test(2nd order differencing) -> checks p-val & detrmine stationary/non-stationary
log to reduce p val [log -> normal vals after predicting (exponential -> e^(x-1))]
plot acf/pacf 
[d (no. of order differencing, nonstaionary -> stationary (1st order generally))]
acf/pacf -> p(auto regresive/corr), q(moving avg/rolling mean) vals at spikes (1, 1, 1)
arima , ((AR) model predicts future behavior based on past(synonym lagged) behavior)
stationary (problem of multi-collinearity if the data is non-stationary.)

*DL AlGOS
perceptron
activation funcs
gradient descent, stochastic gd, batch gd
dropout (regularization)
data augmentation
batch, mini-batch
optimizers (gradient descent with momentum -> rmsprop -> adam)
batch normalization
covariate shift
softmax
convolution (feature sharing), padding, stride, pooling, fully connected
sequence data
rnn types (remember across data)
vanishing gradient
gru, lstm (memory cell, update, forget), brnn, attention
word embedding
cosine similarity

*MLOPS
zenml, mlflow(to deploy model) check how to deploy !! 
steps => run pipeline -> train pipeline (ingest_df , clean_df, train model, evaluate model)
folder structure(run_pipeline.py, pipelines(train_pipeline.py, deploy_pipeline.py), steps(ingest/clean/train/evaluate.py), src(helper funcs for clean/train))
Steps: Individual units of work within a pipeline.
Monitor pipeline executions.
View pipeline logs and artifacts.
Track experiment results.
Manage your ML models.
Artifacts: Intermediate or final outputs of pipeline steps (e.g., data, models). Â  
Pipelines: A sequence of steps that define the overall ML workflow.
Stack: A collection of components (e.g., artifact store, orchestrator) that define the infrastructure for your ML pipelines.
Caching: ZenML automatically caches the results of pipeline steps, improving efficiency by reusing previously computed results

*GENAI
llm, rag
bias, hallucination
prompts =>
sumarize this (limit words) -> video url or document conversation, 
proofread the following text, for spelling and grammatical errors and rewrite-> provide text
brainstorm ideas for -> provide context ex- peanut cookies shop
help me rewrite this-> give text
team rating based on feedback

*AWS Services
s3 -> create bucket, boto3 create bucket, upload/download file (connect with bucket using bucket name)
ec2 -> launch instance, create key pair, who can access ec2 instance (set ip), login through ssh using ssh key, boto3 check instances running, monitor instances (connect with instance using instance id)
sns -> pub/sub, boto3 code
lambda -> upload functions (api's) that will be used by a lot of users, need to balance load, store logs, lambda does it all [api gateway -> access lambda func from outside, creates api to access lambda func]
kinesis -> wait until data become eg:5mb then push data to db
iam -> IAM controls who has access to your AWS resources and what they can do with them. This is crucial for security and compliance (admin)
rds -> relational db (sql)
influxdb -> time series db like proetheus
dynamodb -> no sql db

*FLASK / FastAPI

*CODE
pd =>
groupby, unique, nunique, loc, iloc, info, sort_values, value_counts, shape, describe
concat, join, merge, is_null, todate_time, dtypes, columns, drop_duplicates
rename, drop, 
corr, heatmap

numpy =>
np.nan

tensorflow =>
Sequential, Rescaling, Conv2D, MaxPooling2D, Flatten, Dense

cv2 => 
imread, imwrite, resize, cvtColor, rotate, Canny, dilate, erode, GaussianBlur, threshold
findContours, boundingRect, drawContours

PIL library -> image preprocess

selenium => 
bot = webdriver.Firefox(executable_path=GeckoDriverManager().install()),
.get('https://www.instagram.com/accounts/login/?source=auth_switcher')
.find_element_by_name, .find_elements_by_class_name, .clear, .send_keys, .execute_script, 

beautifulsoup =>
r = requests.get(url)
html_doc = r.text
soup = BeautifulSoup(html_doc, "html5lib")
soup.find(lambda tag: tag.name == 'tag' and tag.has_attr('id') and tag['id'] == "sample_text")


*SQL
crud
relational vs non relational db
create, insert, drop, delete
update, where
order by, limit, offset
distinct, count, sum, avg, group by
joins
prim, foreign key
inner outer join

*SNOWFLAKE
basic idea

*SPARK
spark context, rdd(fault tolerance)
flatmap
spark stream
mllib
spark sql, hive context
hdf5

*TABLEAU
create bins, calculated field, parameter
change granularity
dual axis
storytelling
map plot[lat,long -> state/country -> cols(sales, age ...)]
join vs blend
problems in left/right join (check more than 1 cond)

*ELK
logstash input, filter, output
elasticsearch queries, aggs
kibana
vega basics
[run elk bin -> elasticsearch, kibana (local host)]

*JENKINS
jenkins file, stages
create job, schedule, cron job
upstream/downstream jobs

*DOCKER
cmds, docker file
docker client/host/registry
depends_on
Virtualization vs Containerization

*GIT
cmds
ssh

*INFRA DESIGN

*REACT
stateless, dom elements useRef, redux, inline style
onClick, onSubmit -> forms, onChange
useEffect, hooks
routing, link, lazy loading
spread operator
react vs next
async call, redux thunk
fetch/axios
apollo client gql (useQuery, useMutation)
react native
typescript
server-side rendering
virtual DOM 
reusable components

*NODE
post, get, put, delete, req.body req.params
graphql (typedefs, resolvers, query, mutation)
mikroorm
sql use
mongodb, pusher

*LANGUAGE BASICS
const(block scoped), let(block scoped -> update), var(global -> update, re-declare)
primitive, non primitive data types | pass by value (alocate new memory space), reference 
diff datatypes, hoisting, == vs === , coercion
currying, closures
callbacks
Hoisting is the default behavior of moving all the declarations at the top of the scope
before code execution.

interpreted vs compiled language
static vs dynamic typed language

list vs tuple
list comprehension (one liner)
private heap space
pep8, namespace
lambda, map, filter, reduce, class vs func, init -> constructor -> initialization
range vs xrange, picking, unpicking
inheritance, polymorphism, encapsulation, abstraction
int, str, float (size in memory)
list, dic
function (default, positional arguments)
class
attributes (variables)
methods (in class func)
object
constructor
class/instance variable, instance method
static method
accesor, mutator
decorator, @classmethod
generator, yield
inner/outer class
inheritance
ploymorphism (operator overloading/overriding, method overloading/overriding)
abstraction
apply
lambda
max
append
extend
pop
range
len
join
find
split
ord
dir
------------------------------------------------------------------------------------------------------------------------------


var, let, const
call(), apply(), bind()
this
== vs ===
Nan

hoisting, coercion
primitive, non primitive, pass by val/ref
Immediately Invoked Function
Higher Order Functions
currying
global/local/function/block scope, Scope Chain
closures 
throttling, debouncing
map, reduce
promise
async function

------------------------------------------------------------------------------------
SQL

sql dialects, primary/foreign key, index, SQL subsets
alias, clause, aggregate/scalar functions
Entities and Relationships

use db_name
create table table_name(
 col_name type
primary key(col_name)
)
select * from table_name
insert into table_name(col1,...) values(val1,...)
describe table_name
drop table table_name
alter table table_name add new_col
alter table table_name drop column col_name

update table_name 
set 
where

delete from
where

select col_name as new_name 
from table_name
where in and
order by
limit

select distinct, count(), sum(), avg()
group by
where like '%'

union
join










